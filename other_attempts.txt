import xgboost as xgb
from sklearn.ensemble import RandomForestClassifier
from scipy.stats import uniform, randint


# Random Forest
# rf = RandomForestClassifier(n_estimators = 1000, random_state = 42, verbose=1)
# rf.fit(xTr, yTr)
# predictions = rf.predict(xVal)
# Accuracy: 0.7630666666666667 with 100 n_estimators
# Accuracy: 0.7805333333333333 with 1000 n_estimators


# SVM classifier
# svm_classifier = SVC(kernel='rbf', verbose=1)
# svm_classifier.fit(xTr, yTr)
# predictions = svm_classifier.predict(xVal)
# Accuracy: 0.8144 with 'linear' kernel
# Accuracy: 0.8329333333333333 with 'rbf' kernel

# XGBoost Regression
# xgb_regressor = xgb.XGBRegressor(objective='reg:squarederror', random_state=42)
# xgb_regressor.fit(xTr, yTr)
# predictions = xgb_regressor.predict(xVal)
# predictions = np.array(predictions > 0.4, dtype=np.int8)
# Accuracy: 0.7653333333333333

# XGBoost Classifier
# xgb_classifier = xgb.XGBClassifier(objective='binary:hinge', random_state=42, verbosity=1)
# xgb_classifier.fit(xTr, yTr)
# predictions = xgb_classifier.predict(xVal)
# Accuracy: 0.7849333333333334 binary:logistic
# Accuracy: 0.7708 binary:hinge

# RandomizedSearch XGBClassifier
# xgb_classifier = xgb.XGBClassifier()
# params = {
#     "colsample_bytree": uniform(0.7, 0.3),
#     "gamma": uniform(0, 0.5),
#     "learning_rate": uniform(0.03, 0.3), # default 0.1 
#     "max_depth": randint(2, 6), # default 3
#     "n_estimators": randint(100, 150), # default 100
#     "subsample": uniform(0.6, 0.4)
# }
# search = RandomizedSearchCV(xgb_classifier, param_distributions=params, random_state=42, n_iter=200, cv=3, verbose=1, n_jobs=1, return_train_score=True)
# search.fit(xTr, yTr)
# report_best_scores(search.cv_results_, 1)

# RandomizedSearch XGBClassifier Results
# xgb_classifier = xgb.XGBClassifier(
#     objective='binary:logistic', 
#     random_state=42, 
#     colsample_bytree=0.7587948587257435, 
#     gamma=0.022613644455269033, 
#     learning_rate=0.1275990992289793, 
#     max_depth=5, 
#     n_estimators=144, 
#     subsample=0.7085396127095583)
# xgb_classifier.fit(xTr, yTr)
# predictions = xgb_classifier.predict(xVal)
# Accuracy: 0.794